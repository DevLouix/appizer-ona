# modifiers/ios.py\nimport os\nimport shutil\nimport json\nfrom utils.file_operations import replace_in_file, copy_file_if_exists\n\ndef inject_into_ios_files(config, ios_project_root, container_multi_platform_root, webapp_assets_dir):\n    \"\"\"\n    Inject configuration into iOS project files.\n    \n    Args:\n        config: Merged iOS configuration dictionary\n        ios_project_root: Path to iOS project root in container\n        container_multi_platform_root: Path to multi-platform root\n        webapp_assets_dir: Path to webapp assets directory\n    \"\"\"\n    print(f\"[ios.py] Starting iOS file modification...\")\n    print(f\"[ios.py] iOS project root: {ios_project_root}\")\n    print(f\"[ios.py] Config: {config}\")\n    \n    try:\n        # Extract configuration values\n        app_name = config.get(\"app_name\", \"WebViewApp\")\n        bundle_identifier = config.get(\"build\", {}).get(\"bundle_identifier\", \"com.webview.app\")\n        version_string = config.get(\"build\", {}).get(\"version_string\", \"1.0.0\")\n        build_number = config.get(\"build\", {}).get(\"build_number\", 1)\n        target_os_version = config.get(\"build\", {}).get(\"target_os_version\", \"14.0\")\n        \n        # URL configuration\n        url = config.get(\"url\", \"\")\n        if not url:\n            # Use local assets\n            url = \"file://\" + os.path.join(ios_project_root, \"WebApp\", \"index.html\")\n            print(f\"[ios.py] Using local assets URL: {url}\")\n        \n        # Webapp configuration\n        webapp_config = config.get(\"webapp\", {})\n        enable_javascript = webapp_config.get(\"enable_javascript\", True)\n        fullscreen = webapp_config.get(\"fullscreen\", True)\n        theme_color = webapp_config.get(\"theme_color\", \"#F8F8F8\")\n        user_agent = webapp_config.get(\"user_agent\", \"\")\n        \n        # Splash configuration\n        splash_config = config.get(\"splash\", {})\n        splash_type = splash_config.get(\"type\", \"color\")\n        splash_duration = splash_config.get(\"duration\", 1500)\n        splash_background_color = splash_config.get(\"background_color\", \"#FFFFFF\")\n        \n        # Update Info.plist\n        info_plist_path = os.path.join(ios_project_root, \"WebViewApp\", \"Info.plist\")\n        if os.path.exists(info_plist_path):\n            print(f\"[ios.py] Updating Info.plist at {info_plist_path}\")\n            \n            # Read and update Info.plist\n            with open(info_plist_path, 'r') as f:\n                content = f.read()\n            \n            # Replace bundle identifier\n            content = content.replace(\n                \"<key>CFBundleIdentifier</key>\\n\\t<string>com.webview.app</string>\",\n                f\"<key>CFBundleIdentifier</key>\\n\\t<string>{bundle_identifier}</string>\"\n            )\n            \n            # Replace app name\n            content = content.replace(\n                \"<key>CFBundleDisplayName</key>\\n\\t<string>WebViewApp</string>\",\n                f\"<key>CFBundleDisplayName</key>\\n\\t<string>{app_name}</string>\"\n            )\n            \n            # Replace version\n            content = content.replace(\n                \"<key>CFBundleShortVersionString</key>\\n\\t<string>1.0.0</string>\",\n                f\"<key>CFBundleShortVersionString</key>\\n\\t<string>{version_string}</string>\"\n            )\n            \n            # Replace build number\n            content = content.replace(\n                \"<key>CFBundleVersion</key>\\n\\t<string>1</string>\",\n                f\"<key>CFBundleVersion</key>\\n\\t<string>{build_number}</string>\"\n            )\n            \n            # Add minimum OS version\n            if \"<key>LSMinimumSystemVersion</key>\" not in content:\n                content = content.replace(\n                    \"</dict>\\n</plist>\",\n                    f\"\\t<key>LSMinimumSystemVersion</key>\\n\\t<string>{target_os_version}</string>\\n</dict>\\n</plist>\"\n                )\n            \n            with open(info_plist_path, 'w') as f:\n                f.write(content)\n            \n            print(f\"[ios.py] ✅ Updated Info.plist\")\n        else:\n            print(f\"[ios.py] ⚠️ Info.plist not found at {info_plist_path}\")\n        \n        # Update ViewController.swift\n        view_controller_path = os.path.join(ios_project_root, \"WebViewApp\", \"ViewController.swift\")\n        if os.path.exists(view_controller_path):\n            print(f\"[ios.py] Updating ViewController.swift at {view_controller_path}\")\n            \n            with open(view_controller_path, 'r') as f:\n                content = f.read()\n            \n            # Replace URL\n            content = content.replace(\n                'let url = URL(string: \"https://www.google.com\")!',\n                f'let url = URL(string: \"{url}\")!'\n            )\n            \n            # Update JavaScript settings\n            js_setting = \"true\" if enable_javascript else \"false\"\n            content = content.replace(\n                \"webView.configuration.preferences.javaScriptEnabled = true\",\n                f\"webView.configuration.preferences.javaScriptEnabled = {js_setting}\"\n            )\n            \n            # Update user agent if specified\n            if user_agent:\n                if \"webView.customUserAgent\" not in content:\n                    content = content.replace(\n                        \"webView.load(URLRequest(url: url))\",\n                        f'webView.customUserAgent = \"{user_agent}\"\\n        webView.load(URLRequest(url: url))'\n                    )\n            \n            with open(view_controller_path, 'w') as f:\n                f.write(content)\n            \n            print(f\"[ios.py] ✅ Updated ViewController.swift\")\n        else:\n            print(f\"[ios.py] ⚠️ ViewController.swift not found at {view_controller_path}\")\n        \n        # Copy webapp assets if using local files\n        if webapp_assets_dir and os.path.exists(webapp_assets_dir):\n            webapp_dest = os.path.join(ios_project_root, \"WebApp\")\n            print(f\"[ios.py] Copying webapp assets from {webapp_assets_dir} to {webapp_dest}\")\n            \n            if os.path.exists(webapp_dest):\n                shutil.rmtree(webapp_dest)\n            \n            shutil.copytree(webapp_assets_dir, webapp_dest)\n            print(f\"[ios.py] ✅ Copied webapp assets\")\n        \n        # Handle app icon\n        logo_path = config.get(\"logo\", \"\")\n        if logo_path and os.path.exists(os.path.join(container_multi_platform_root, logo_path)):\n            icon_source = os.path.join(container_multi_platform_root, logo_path)\n            icons_dir = os.path.join(ios_project_root, \"WebViewApp\", \"Assets.xcassets\", \"AppIcon.appiconset\")\n            \n            if os.path.exists(icons_dir):\n                print(f\"[ios.py] Copying app icon from {icon_source} to {icons_dir}\")\n                \n                # iOS requires multiple icon sizes\n                icon_sizes = [\n                    (\"20x20\", 20), (\"29x29\", 29), (\"40x40\", 40),\n                    (\"58x58\", 58), (\"60x60\", 60), (\"80x80\", 80),\n                    (\"87x87\", 87), (\"120x120\", 120), (\"180x180\", 180)\n                ]\n                \n                try:\n                    from PIL import Image\n                    \n                    with Image.open(icon_source) as img:\n                        for size_name, size in icon_sizes:\n                            resized = img.resize((size, size), Image.Resampling.LANCZOS)\n                            icon_dest = os.path.join(icons_dir, f\"icon-{size_name}.png\")\n                            resized.save(icon_dest, \"PNG\")\n                    \n                    print(f\"[ios.py] ✅ Generated iOS app icons\")\n                except ImportError:\n                    print(f\"[ios.py] ⚠️ PIL not available, copying original icon\")\n                    shutil.copy2(icon_source, os.path.join(icons_dir, \"icon-1024x1024.png\"))\n                except Exception as e:\n                    print(f\"[ios.py] ⚠️ Error processing icon: {e}\")\n        \n        # Handle splash screen\n        splash_content = splash_config.get(\"content\", \"\")\n        if splash_content and os.path.exists(os.path.join(container_multi_platform_root, splash_content)):\n            splash_source = os.path.join(container_multi_platform_root, splash_content)\n            splash_dest = os.path.join(ios_project_root, \"WebViewApp\", \"Assets.xcassets\", \"LaunchImage.imageset\")\n            \n            if os.path.exists(splash_dest):\n                print(f\"[ios.py] Copying splash image from {splash_source} to {splash_dest}\")\n                shutil.copy2(splash_source, os.path.join(splash_dest, \"launch-image.png\"))\n                print(f\"[ios.py] ✅ Updated splash image\")\n        \n        print(f\"[ios.py] ✅ iOS file modification completed successfully\")\n        \n    except Exception as e:\n        print(f\"[ios.py] ❌ Error during iOS file modification: {e}\")\n        import traceback\n        traceback.print_exc()\n        raise\n"