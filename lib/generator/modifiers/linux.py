# modifiers/linux.py\nimport os\nimport shutil\nimport json\nfrom utils.file_operations import replace_in_file, copy_file_if_exists\n\ndef inject_into_linux_files(config, linux_project_root, container_multi_platform_root, webapp_assets_dir):\n    \"\"\"\n    Inject configuration into Linux project files (Tauri-based).\n    \n    Args:\n        config: Merged Linux configuration dictionary\n        linux_project_root: Path to Linux project root in container\n        container_multi_platform_root: Path to multi-platform root\n        webapp_assets_dir: Path to webapp assets directory\n    \"\"\"\n    print(f\"[linux.py] Starting Linux file modification...\")\n    print(f\"[linux.py] Linux project root: {linux_project_root}\")\n    print(f\"[linux.py] Config: {config}\")\n    \n    try:\n        # Extract configuration values\n        app_name = config.get(\"app_name\", \"WebViewApp\")\n        package_name = config.get(\"package_name\", \"com.webview.linuxapp\")\n        \n        # Build configuration\n        build_config = config.get(\"build\", {})\n        version = build_config.get(\"version\", \"1.0.0\")\n        app_id = build_config.get(\"app_id\", \"com.webview.linuxapp\")\n        product_name = build_config.get(\"product_name\", app_name)\n        architecture = build_config.get(\"architecture\", \"x64\")\n        package_format = build_config.get(\"package_format\", \"deb\")\n        \n        # URL configuration\n        url = config.get(\"url\", \"\")\n        if not url:\n            # Use local assets\n            url = \"../dist/index.html\"\n            print(f\"[linux.py] Using local assets URL: {url}\")\n        \n        # Webapp configuration\n        webapp_config = config.get(\"webapp\", {})\n        width = webapp_config.get(\"width\", 1280)\n        height = webapp_config.get(\"height\", 800)\n        resizable = webapp_config.get(\"resizable\", True)\n        frameless = webapp_config.get(\"frameless\", False)\n        background_color = webapp_config.get(\"background_color\", \"#FFFFFF\")\n        user_agent = webapp_config.get(\"user_agent\", \"\")\n        \n        # Update Tauri configuration\n        tauri_conf_path = os.path.join(linux_project_root, \"src-tauri\", \"tauri.conf.json\")\n        if os.path.exists(tauri_conf_path):\n            print(f\"[linux.py] Updating tauri.conf.json at {tauri_conf_path}\")\n            \n            with open(tauri_conf_path, 'r') as f:\n                tauri_config = json.load(f)\n            \n            # Update package information\n            tauri_config[\"package\"][\"productName\"] = product_name\n            tauri_config[\"package\"][\"version\"] = version\n            \n            # Update app identifier\n            tauri_config[\"tauri\"][\"bundle\"][\"identifier\"] = app_id\n            \n            # Update window configuration\n            if \"windows\" not in tauri_config[\"tauri\"]:\n                tauri_config[\"tauri\"][\"windows\"] = []\n            \n            if len(tauri_config[\"tauri\"][\"windows\"]) == 0:\n                tauri_config[\"tauri\"][\"windows\"].append({})\n            \n            window_config = tauri_config[\"tauri\"][\"windows\"][0]\n            window_config[\"title\"] = app_name\n            window_config[\"width\"] = width\n            window_config[\"height\"] = height\n            window_config[\"resizable\"] = resizable\n            window_config[\"decorations\"] = not frameless\n            \n            # Update bundle configuration for Linux\n            bundle_config = tauri_config[\"tauri\"][\"bundle\"]\n            bundle_config[\"targets\"] = [package_format]\n            \n            # Set icon path if available\n            icon_path = config.get(\"icon\", \"\")\n            if icon_path:\n                bundle_config[\"icon\"] = [\"icons/icon.png\"]\n            \n            # Update security configuration\n            if \"security\" not in tauri_config[\"tauri\"]:\n                tauri_config[\"tauri\"][\"security\"] = {}\n            \n            tauri_config[\"tauri\"][\"security\"][\"csp\"] = None  # Allow all content for webview\n            \n            with open(tauri_conf_path, 'w') as f:\n                json.dump(tauri_config, f, indent=2)\n            \n            print(f\"[linux.py] ✅ Updated tauri.conf.json\")\n        else:\n            print(f\"[linux.py] ⚠️ tauri.conf.json not found at {tauri_conf_path}\")\n        \n        # Update Cargo.toml\n        cargo_toml_path = os.path.join(linux_project_root, \"src-tauri\", \"Cargo.toml\")\n        if os.path.exists(cargo_toml_path):\n            print(f\"[linux.py] Updating Cargo.toml at {cargo_toml_path}\")\n            \n            with open(cargo_toml_path, 'r') as f:\n                content = f.read()\n            \n            # Update package name and version\n            content = replace_in_file(\n                content,\n                'name = \"webview-app\"',\n                f'name = \"{app_name.lower().replace(\" \", \"-\")}\"'\n            )\n            \n            content = replace_in_file(\n                content,\n                'version = \"0.1.0\"',\n                f'version = \"{version}\"'\n            )\n            \n            with open(cargo_toml_path, 'w') as f:\n                f.write(content)\n            \n            print(f\"[linux.py] ✅ Updated Cargo.toml\")\n        else:\n            print(f\"[linux.py] ⚠️ Cargo.toml not found at {cargo_toml_path}\")\n        \n        # Update main.rs\n        main_rs_path = os.path.join(linux_project_root, \"src-tauri\", \"src\", \"main.rs\")\n        if os.path.exists(main_rs_path):\n            print(f\"[linux.py] Updating main.rs at {main_rs_path}\")\n            \n            with open(main_rs_path, 'r') as f:\n                content = f.read()\n            \n            # Update window title\n            content = replace_in_file(\n                content,\n                '.title(\"WebView App\")',\n                f'.title(\"{app_name}\")'\n            )\n            \n            # Update window size\n            content = replace_in_file(\n                content,\n                '.inner_size(1024.0, 768.0)',\n                f'.inner_size({width}.0, {height}.0)'\n            )\n            \n            # Update resizable setting\n            resizable_str = \"true\" if resizable else \"false\"\n            content = replace_in_file(\n                content,\n                '.resizable(true)',\n                f'.resizable({resizable_str})'\n            )\n            \n            # Update decorations (window frame)\n            decorations_str = \"false\" if frameless else \"true\"\n            if '.decorations(' not in content:\n                content = content.replace(\n                    '.resizable(' + resizable_str + ')',\n                    f'.resizable({resizable_str})\\n        .decorations({decorations_str})'\n                )\n            \n            with open(main_rs_path, 'w') as f:\n                f.write(content)\n            \n            print(f\"[linux.py] ✅ Updated main.rs\")\n        else:\n            print(f\"[linux.py] ⚠️ main.rs not found at {main_rs_path}\")\n        \n        # Update index.html for webview\n        index_html_path = os.path.join(linux_project_root, \"dist\", \"index.html\")\n        if not os.path.exists(os.path.dirname(index_html_path)):\n            os.makedirs(os.path.dirname(index_html_path))\n        \n        # Create or update index.html\n        if url.startswith(\"http\"):\n            # Create a redirect page for external URLs\n            html_content = f'''\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{app_name}</title>\n    <style>\n        body {{\n            margin: 0;\n            padding: 0;\n            background-color: {background_color};\n        }}\n        iframe {{\n            width: 100vw;\n            height: 100vh;\n            border: none;\n        }}\n    </style>\n</head>\n<body>\n    <iframe src=\"{url}\" title=\"{app_name}\"></iframe>\n</body>\n</html>\n'''\n            with open(index_html_path, 'w') as f:\n                f.write(html_content)\n            print(f\"[linux.py] ✅ Created redirect HTML for external URL\")\n        else:\n            # Copy webapp assets if using local files\n            if webapp_assets_dir and os.path.exists(webapp_assets_dir):\n                dist_dir = os.path.join(linux_project_root, \"dist\")\n                print(f\"[linux.py] Copying webapp assets from {webapp_assets_dir} to {dist_dir}\")\n                \n                if os.path.exists(dist_dir):\n                    shutil.rmtree(dist_dir)\n                \n                shutil.copytree(webapp_assets_dir, dist_dir)\n                print(f\"[linux.py] ✅ Copied webapp assets\")\n        \n        # Handle app icon\n        icon_path = config.get(\"icon\", \"\")\n        if icon_path and os.path.exists(os.path.join(container_multi_platform_root, icon_path)):\n            icon_source = os.path.join(container_multi_platform_root, icon_path)\n            icons_dir = os.path.join(linux_project_root, \"src-tauri\", \"icons\")\n            \n            if not os.path.exists(icons_dir):\n                os.makedirs(icons_dir)\n            \n            print(f\"[linux.py] Copying app icon from {icon_source} to {icons_dir}\")\n            \n            # Linux typically uses PNG icons\n            icon_sizes = [16, 32, 48, 64, 128, 256, 512]\n            \n            try:\n                from PIL import Image\n                \n                with Image.open(icon_source) as img:\n                    for size in icon_sizes:\n                        resized = img.resize((size, size), Image.Resampling.LANCZOS)\n                        icon_dest = os.path.join(icons_dir, f\"icon-{size}x{size}.png\")\n                        resized.save(icon_dest, \"PNG\")\n                    \n                    # Also create a generic icon.png\n                    resized = img.resize((256, 256), Image.Resampling.LANCZOS)\n                    icon_dest = os.path.join(icons_dir, \"icon.png\")\n                    resized.save(icon_dest, \"PNG\")\n                \n                print(f\"[linux.py] ✅ Generated Linux app icons\")\n            except ImportError:\n                print(f\"[linux.py] ⚠️ PIL not available, copying original icon\")\n                shutil.copy2(icon_source, os.path.join(icons_dir, \"icon.png\"))\n            except Exception as e:\n                print(f\"[linux.py] ⚠️ Error processing icon: {e}\")\n        \n        # Create desktop entry file\n        desktop_entry_path = os.path.join(linux_project_root, f\"{app_name.lower().replace(' ', '-')}.desktop\")\n        desktop_content = f'''[Desktop Entry]\nVersion=1.0\nType=Application\nName={app_name}\nComment={app_name} - Web Application\nExec={app_name.lower().replace(' ', '-')}\nIcon={app_name.lower().replace(' ', '-')}\nTerminal=false\nCategories=Network;WebBrowser;\n'''\n        \n        with open(desktop_entry_path, 'w') as f:\n            f.write(desktop_content)\n        \n        print(f\"[linux.py] ✅ Created desktop entry file\")\n        print(f\"[linux.py] ✅ Linux file modification completed successfully\")\n        \n    except Exception as e:\n        print(f\"[linux.py] ❌ Error during Linux file modification: {e}\")\n        import traceback\n        traceback.print_exc()\n        raise\n"